// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  upiId     String?               // Optional UPI ID
  upiQrCode String?               // Optional QR Code (can be a URL or base64)
  groups    GroupMember[]
  expenses  Expense[]
  createdAt DateTime @default(now())
  
  sentSettlements     Settlement[] @relation("SentSettlements")
  receivedSettlements Settlement[] @relation("ReceivedSettlements")
}


model Group {
  id        String       @id @default(uuid())
  name      String
  members   GroupMember[]
  expenses  Expense[]
  settlements Settlement[] 
  createdAt DateTime    @default(now())
}

model GroupMember {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  role      String   @default("member") // or enum: ADMIN, MEMBER
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model Expense {
  id        String   @id @default(uuid())
  groupId   String
  paidById  String
  amount    Float
  description String
  group     Group    @relation(fields: [groupId], references: [id])
  paidBy    User     @relation(fields: [paidById], references: [id])
  createdAt DateTime @default(now())
}

model Settlement {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  amount     Float
  groupId    String
  createdAt  DateTime @default(now())

  fromUser   User     @relation("SentSettlements", fields: [fromUserId], references: [id])
  toUser     User     @relation("ReceivedSettlements", fields: [toUserId], references: [id])
  group      Group    @relation(fields: [groupId], references: [id])
}



